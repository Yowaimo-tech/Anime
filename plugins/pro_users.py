from pyrogram import Client, filters
from pyrogram.types import Message
from datetime import datetime, timedelta, timezone
from pyrogram.errors import PeerIdInvalid, UserIsBlocked, InputUserDeactivated
from zoneinfo import ZoneInfo

from bot import Bot
import config  # Corrected import

# Define the Indian Standard Time zone
IST = ZoneInfo("Asia/Kolkata")

#========================================================================#

@Client.on_message(filters.command('add_premium') & filters.private)
async def add_premium_command(client: Bot, message: Message):
    # Check if user is owner or admin
    if message.from_user.id != config.OWNER_ID and message.from_user.id not in config.ADMINS:
        await message.reply_text("‚ùå ·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
        return

    if len(message.command) < 2:
        await message.reply_text(
            "ü•Ç ·¥ús·¥Ä…¢·¥á:\n/add_premium <·¥ús·¥á Ä_…™·¥Ö> [·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥] [s/·¥ç/ ú/·¥Ö/ è]\n\n"
            "üé© ·¥áx·¥Ä·¥ç·¥ò ü·¥ás:\n"
            "üåÄ /add_premium 123456789 ‚Äî ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ\n"
            "‚òî /add_premium 123456789 2 ·¥Ö ‚Äî 2 ·¥Ö·¥Ä ès"
        )
        return

    try:
        user_id_to_add = int(message.command[1])
    except ValueError:
        await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö.")
        return

    expires_at_ist_display = None
    action_text = "·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ ü è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö"
    is_permanent = True

    # Handle temporary subscription if duration is provided
    if len(message.command) == 4:
        is_permanent = False
        try:
            amount = int(message.command[2])
            unit = message.command[3].lower()
            delta = timedelta()

            if unit == "s": delta = timedelta(seconds=amount)
            elif unit == "m": delta = timedelta(minutes=amount)
            elif unit == "h": delta = timedelta(hours=amount)
            elif unit == "d": delta = timedelta(days=amount)
            elif unit == "y": delta = timedelta(days=amount * 365)
            else:
                return await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥õ…™·¥ç·¥á ·¥ú…¥…™·¥õ. ·¥ús·¥á: s/·¥ç/ ú/·¥Ö/ è.")

            now_ist = datetime.now(IST)
            start_date_ist = now_ist
            action_text = " Ä·¥á…¥·¥á·¥°·¥á·¥Ö"

            pro_doc = await client.mongodb.get_pro_user(user_id_to_add)
            if pro_doc:
                existing_expires_at = pro_doc.get('expires_at')
                if existing_expires_at:
                    existing_expires_at_ist = existing_expires_at.astimezone(IST)
                    if existing_expires_at_ist > now_ist:
                        start_date_ist = existing_expires_at_ist
                        action_text = "·¥áx·¥õ·¥á…¥·¥Ö·¥á·¥Ö"

            expires_at_ist_display = start_date_ist + delta
            expires_at_utc = expires_at_ist_display.astimezone(timezone.utc)
            await client.mongodb.add_pro(user_id_to_add, expires_at_utc)

        except Exception as e:
            await message.reply_text(f"‚ùå ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥Ö·¥ú Ä…™…¥…¢ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥Ä·¥õ…™·¥è…¥: {e}")
            client.LOGGER(__name__, "ADD_PREMIUM").error(f"Error: {e}", exc_info=True)
            return
    else:
        # Handle permanent subscription
        await client.mongodb.add_pro(user_id_to_add, expires_at=None)

    # --- Notification Logic ---
    admin_reply_text = f"üéã ·¥ús·¥á Ä <code>{user_id_to_add}</code> s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ {action_text.lower()}"
    if expires_at_ist_display:
        admin_reply_text += f" ·¥ú…¥·¥õ…™ ü {expires_at_ist_display.strftime('%·¥Ö % ô % è, % ú:%·¥ç %·¥¢')}."

    try:
        if is_permanent:
            await client.send_message(user_id_to_add, "üéâ **·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s!** ü•Ç\n\n è·¥è·¥ú  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ …¢ Ä·¥Ä…¥·¥õ·¥á·¥Ö ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥áss. ‚òî")
        else:
            expiry_text = expires_at_ist_display.strftime('%·¥Ö % ô % è ·¥Ä·¥õ %…™:%·¥ç %·¥ò %·¥¢')
            await client.send_message(user_id_to_add, f"üéâ **·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s!  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥° ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Ä.** üç•\n\n è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥áss …™s ·¥†·¥Ä ü…™·¥Ö ·¥ú…¥·¥õ…™ ü: **{expiry_text}** ‚õ±Ô∏è")
        
        admin_reply_text += "\n\n·¥ús·¥á Ä  ú·¥Äs  ô·¥á·¥á…¥ …¥·¥è·¥õ…™“ì…™·¥á·¥Ö. üç∑"
    except (UserIsBlocked, InputUserDeactivated, PeerIdInvalid):
        admin_reply_text += "\n\n·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ …¥·¥è·¥õ…™“ì è ·¥õ ú·¥á ·¥ús·¥á Ä (·¥õ ú·¥á è ·¥ç·¥Ä è  ú·¥Ä·¥†·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ). üåÄ"
    except Exception as e:
        client.LOGGER(__name__, "ADD_PREMIUM_NOTIFY").error(f"Failed to notify user {user_id_to_add}: {e}")
        admin_reply_text += f"\n\n·¥Ä…¥ ·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥õ Ä è…™…¥…¢ ·¥õ·¥è …¥·¥è·¥õ…™“ì è ·¥õ ú·¥á ·¥ús·¥á Ä. üéã"
    
    await message.reply_text(admin_reply_text)


#========================================================================#

@Client.on_message(filters.command('rev_premium') & filters.private)
async def rev_premium_command(client: Bot, message: Message):
    # Check if user is owner or admin
    if message.from_user.id != config.OWNER_ID and message.from_user.id not in config.ADMINS:
        await message.reply_text("‚ùå ·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
        return

    if len(message.command) != 2:
        return await message.reply_text("üåÄ ·¥ús·¥Ä…¢·¥á: /rev_premium <·¥ús·¥á Ä…™·¥Ö>")

    try:
        user_id_to_remove = int(message.command[1])
    except ValueError:
        return await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¢·¥Ä…™…¥...!")

    if not await client.mongodb.get_pro_user(user_id_to_remove):
        return await message.reply_text(f"‚òî ·¥ús·¥á Ä <code>{user_id_to_remove}</code> …™s …¥·¥è·¥õ …™…¥ ·¥õ ú·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç  ü…™s·¥õ.")

    await client.mongodb.remove_pro(user_id_to_remove)
    
    user_name = f"<code>{user_id_to_remove}</code>"
    try:
        user = await client.get_users(user_id_to_remove)
        user_name = user.mention
    except (PeerIdInvalid, IndexError):
        pass

    await message.reply_text(f"üç• ·¥ús·¥á Ä {user_name}  ú·¥Äs  ô·¥á·¥á…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs! ‚õ±Ô∏è")

    try:
        await client.send_message(user_id_to_remove, "üéã  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥á·¥ç ô·¥á Äs ú…™·¥ò  ú·¥Äs  ô·¥á·¥á…¥  Ä·¥á·¥†·¥è·¥ã·¥á·¥Ö.\n\n·¥õ·¥è  Ä·¥á…¥·¥á·¥° ·¥õ ú·¥á ·¥ç·¥á·¥ç ô·¥á Äs ú…™·¥ò, ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä. üç∑")
    except (UserIsBlocked, InputUserDeactivated, PeerIdInvalid):
        await message.reply_text(f"üåÄ ·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ …¥·¥è·¥õ…™“ì è ·¥õ ú·¥á ·¥ús·¥á Ä (·¥õ ú·¥á è ·¥ç·¥Ä è  ú·¥Ä·¥†·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ ·¥è Ä  ú·¥Ä·¥†·¥á ·¥Ä ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ).")
    except Exception as e:
        await message.reply_text(f"üéã ·¥Ä…¥ ·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥õ Ä è…™…¥…¢ ·¥õ·¥è …¥·¥è·¥õ…™“ì è ·¥õ ú·¥á ·¥ús·¥á Ä: {e}")


#========================================================================#

@Client.on_message(filters.command('premium_users') & filters.private)
async def premium_users_command(client: Bot, message: Message):
    # Check if user is owner or admin
    if message.from_user.id != config.OWNER_ID and message.from_user.id not in config.ADMINS:
        await message.reply_text("‚ùå ·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
        return

    pro_user_docs = await client.mongodb.get_pros_list()
    
    active_users = []
    expired_user_ids_to_remove = []
    now_utc = datetime.now(timezone.utc)

    for user_doc in pro_user_docs:
        expires_at = user_doc.get('expires_at')
        if expires_at and isinstance(expires_at, datetime):
            if expires_at.tzinfo is None:
                expires_at = expires_at.replace(tzinfo=timezone.utc)
            
            if expires_at < now_utc:
                expired_user_ids_to_remove.append(user_doc['_id'])
                continue
        
        active_users.append(user_doc)

    cleanup_notice = ""
    if expired_user_ids_to_remove:
        client.LOGGER(__name__, "PREMIUM_USERS_CMD").info(f"Found {len(expired_user_ids_to_remove)} expired users. Cleaning up now...")
        for user_id in expired_user_ids_to_remove:
            await client.mongodb.remove_pro(user_id)
        cleanup_notice = f"ü•Ç (·¥Ñ ü·¥á·¥Ä…¥·¥á·¥Ö ·¥ú·¥ò {len(expired_user_ids_to_remove)} ·¥áx·¥ò…™ Ä·¥á·¥Ö ·¥ús·¥á Äs.)\n\n"

    if not active_users:
        return await message.reply_text(f"{cleanup_notice}‚òî …¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs “ì·¥è·¥ú…¥·¥Ö.")

    formatted_users = []
    for user_doc in active_users:
        user_id = user_doc['_id']
        expires_at = user_doc.get('expires_at')
        expiry_text = "üç• s·¥õ·¥Ä·¥õ·¥ús: ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ"
        if expires_at and isinstance(expires_at, datetime):
            if expires_at.tzinfo is None:
                expires_at = expires_at.replace(tzinfo=timezone.utc)
            ist_expires_at = expires_at.astimezone(IST)
            expiry_text = f"‚õ±Ô∏è ·¥áx·¥ò…™ Ä·¥ás: {ist_expires_at.strftime('%·¥Ö % ô % è, % ú:%·¥ç %·¥¢')}"

        try:
            user = await client.get_users(user_id)
            full_name = user.first_name + (" " + user.last_name if user.last_name else "")
            username = f"@{user.username}" if user.username else "…¥/·¥Ä"
            formatted_users.append(
                f"üé© {full_name}\n"
                f"   üéã …™·¥Ö: <code>{user.id}</code>\n"
                f"   üç∑ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á: {username}\n"
                f"   {expiry_text}"
            )
        except Exception:
            formatted_users.append(
                f"üé© ·¥ús·¥á Ä …™·¥Ö: <code>{user_id}</code> (…™…¥“ì·¥è …¥·¥è·¥õ “ì·¥á·¥õ·¥Ñ ú·¥Ä ô ü·¥á)\n"
                f"   {expiry_text}"
            )

    response_text = f"{cleanup_notice}üåÄ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs  ü…™s·¥õ:\n\n" + "\n\n".join(formatted_users)
    for chunk in [response_text[i:i + 4096] for i in range(0, len(response_text), 4096)]:
        await message.reply_text(chunk, disable_web_page_preview=True)
